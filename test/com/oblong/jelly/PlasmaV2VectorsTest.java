// Copyright (c) 2010 Oblong Industries

package com.oblong.jelly;

import org.junit.Assert;
import static org.junit.Assert.*;
import org.junit.Test;

import static com.oblong.jelly.Slaw.*;

/**
 * Unit Test for class PlasmaExternalizerV2: vectors.
 *
 * Created: Wed May 19 13:27:14 2010
 *
 * @author jao
 */
public class PlasmaV2VectorsTest extends ExternalizerTestBase {

    public PlasmaV2VectorsTest() { super(new PlasmaExternalizerV2()); }

    @Test public void weeVectors() {
        short[][] bs = {{0x80, 0x40, 0x40, 0x00, 0x00, 0x00, 0x02, 0x2a},
                        {0x94, 0x40, 0xc0, 0x00, 0x12, 0x34, 0x56, 0x78},
                        {0x80, 0x80, 0x80, 0x00, 0x00, 0x03, 0x01, 0x02},
                        {0x90, 0xc0, 0xc0, 0x00, 0x04, 0x03, 0x01, 0x02},
                        {0x82, 0x40, 0xc0, 0x00, 0x16, 0xfd, 0x02, 0xff}};
        Slaw[] sx = {vector(int8(2), int8(42)),
                     vector(unt16(0x1234), unt16(0x5678)),
                     vector(int8(3), int8(1), int8(2)),
                     vector(unt8(4), unt8(3), unt8(1), unt8(2)),
                     vector(complex(int8(22), int8(-3)),
                            complex(int8(2), int8(-1)))};
        check(sx, bs);
    }

    @Test public void vector16() {
        short[][] bs = {{0x88, 0x41, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a},
                        {0x98, 0x41, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
                        {0xa8, 0x41, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x40, 0x46, 0x66, 0x66, 0xc1, 0x94, 0x7a, 0xe1},
                        {0x94, 0x81, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x00, 0x12, 0x00, 0x34, 0x00, 0x56, 0x00, 0x00},
                        {0x84, 0xc1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x00, 0x12, 0x00, 0x34, 0x00, 0x56, 0x00, 0x01},
                        {0x86, 0x41, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}};
        Slaw[] sx = {vector(int32(2), int32(42)),
                     vector(unt32(0x01020304), unt32(0x05060708)),
                     vector(float32(3.1f), float32(-18.56f)),
                     vector(unt16(0x12), unt16(0x34), unt16(0x56)),
                     vector(int16(0x12), int16(0x34), int16(0x56), int16(1)),
                     vector(complex(int16(0x0102), int16(0x0304)),
                            complex(int16(0x0506), int16(0x0708)))};
        check(sx, bs);
    }

    @Test public void vector24() {
        short[][] bs = {{0x8c, 0x43, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                         0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10},
                        {0x9c, 0x43, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
                        {0xac, 0x43, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x40, 0x08, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd,
                         0xc0, 0x32, 0x8f, 0x5c, 0x28, 0xf5, 0xc2, 0x8f},
                        {0xa8, 0x82, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0xc2, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
                        {0x88, 0xc3, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
                         0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04},
                        {0x9a, 0x43, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18,
                         0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x2b}
        };
        Slaw[] sx = {vector(int64(0x0102030405060708L),
                            int64(0x090a0b0c0d0e0f10L)),
                     vector(unt64(0), int64(1)),
                     vector(float64(3.1), float64(-18.56)),
                     vector(float32(2.5f), float32(0f), float32(-101f)),
                     vector(int32(1), int32(2), int32(3), int32(4)),
                     vector(complex(unt32(23), int8(24)),
                            complex(int16(12), unt16(43)))
        };
        check(sx, bs);
    }
}
